///Задание: Реализованные в предыдущих заданиях конструкторы и деструктор берут на себя работу по управлению ресурсами. 
///Теперь можно дополнить структуру String различными полезными методами.
///Для работы со строками можно придумать множество полезных методов (подумайте, какие методы пригодились бы вам, 
///и чего вам не хватает для их реализации). Примером такого метода может послужить метод append — он добавляет копию 
///строки-аргумента в конец текущей строки (т.е. в конец строки, у которой он был вызван).
///Ваша задача реализовать метод append.
///При выполнении задания будьте аккуратны при работе с памятью — при вызове метода не должно возникать утечек памяти. 
///Кроме того, не забудьте, что size хранит размер без учета завершающего 0 символа.
///Требования к реализации: при реализации вы можете заводить любые вспомогательные функции и методы. 
///В шаблоне вы увидите объявления уже известных вам конструкторов и деструкторов, реализовывать их заново не нужно, они уже реализованы. 
///Вводить или выводить что-либо не нужно. Реализовывать main не нужно. 
///Для работы с памятью не используйте функции из cstdlib (malloc, realloc, calloc и free).
///Источник: Stepic Программирование на языке C++ https://stepik.org/7 от Computer Science Center(CS центр) 
///Глава 3, раздел 3, шаг 12. https://stepik.org/lesson/546/step/12
///Выполнил: Юшаков Н. Р. 23.04.2020.
#include <cstddef> // size_t
#include <cstring> // strlen, strcpy

struct String {
	String(const char *str = "");
	String(size_t n, char c);
	~String();


    /* Ðåàëèçóéòå ýòîò ìåòîä. */
	void append(String &other) {
        size += other.size;
        char *temp = new char[size + 1];
        strcpy(temp, str);
        strcat(temp, other.str);
        delete [] str;
        str = temp;
    }

	size_t size;
	char *str;
};
